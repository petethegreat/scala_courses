
1.1 programming paradigms

mutation - change some attribute while maintaining identity. For example, could define a polynomial class, then set a certain coefficient to a particular value.

functional programming - avoid mutation - use immutable variables (values)
take something and change it, resulting in something else.
minimise side effects

functional programming
restricted definition - no mutable variables, assignments, or imperative conttrol structures
wider sense - a functional programming language allows the construction of elegant programs that focus on fucntions

functions are first class functions

misc


call by value
def func(a:Int):Int = {...}
function func takes an int, returns an Int. Integer argument a is evaluated when the function is called

call by name
def fun(a: =>Int): Int
function fun takes an integer argment (a). argument a is evaluated when it needs to be.

Not all functions terminate, infinte loops are a thing


Both call by value and call by name will reduce to the same outcome provided
  - the reduced expression consists of pure functions (no state information/side effects?)
  - both evaluations terminate (no infinte loops)

if call by value terminates, then call by name will also
converse is not guarenteed: call by name termination does not imply call by value termination
in call by name, unused arguments are not evaluated
  - could have a function that takes two arguments. The second argument is not used (always)
  - could pass a non-terminating input to the CBN function, which is not used. no big deal
  - call by value will try to evaluate it and get stuck

def loop = loop

def moose(a: Int, b: Int):Int = a

moose(1,loop)
will terminate under call by name but not call by value

scala uses call by value by default, Unless the function arguments are defined with =>

def moose_cbn(a: =>Int, b: =>Int) = {}

conditionals
Boolean operations don't always need to evaluate the right hand operand (short circuit evaluation)


true && e -> e
false && e -> false
true || e -> true
false || e -> e



Things can be defined by name or by value
so 
def x = loop
is a function, it is not evaluated untill it needs to be (call by name)

val x = loop
evaluates to loop (call by value) immediately. this will kill your scala session/repl

Recursion
Recursive functions must always have their return type explicitly defined

Tail Recursion
If a function calls itself as it's last action, the stack frame can be reused
Essentially it acts the same as a loop

if a functions last action is to call a function, (maybe the same, maybe different functino), then the stack frame can be used - this is a tail-call

Tail recursive factorial (works)

def factorial(N:Int) = {
    @scala.annotation.tailrec
    def currentProd(n:Int, prod:Int) :Int = {
        if (n==0) prod
        else currentProd(n-1,n*prod)
    }
    currentProd(N,1)
}

blocks and scope
a block is defined by curly braces {}

definitiones inside a block are invisible outside the block
definitions from outside the block are visible inside, provided they have not been shadowed


higher order functions
functions are first class values
they can be passed and returned
a function that does this is called a higher order function

this can be used to factor out common procedures. For example, 

sumFunc(a:Int,b:Int,f: Int =>Int): Int = {
    if (a > b) 0 else f(a) + sumFunc(a+1,b,f)
}

defines a function sumFunc, that takes two integers and a function that takes an Int and returns an Int (Int => Int)
For example, we could sum all squares or cubes between 2 and 5 by calling
sumFunc(2,5,square)
sumFunc(2.5.cube)

The notation A => B is  a ** function type. it is a type that defines a mapping from type A to type B (by  afunction)

anonymous functions
strings exist as literals. We can just write "abc", and the compiler knows it to be a string. We don't need to do 
def str = "abc"; println(str)
instead println("abc") works just fine
Same can be done with functions, we don't always need to define a function, we can define anonymous functions as needed.
(same as lambda functions in python)

these are defined like this
(x: Int) => x*x*x
the type of x can be omitted if it can be inferred.

anonymous functions are syntactic sugar
(x:Int) = x*x

def f(x:Int) = x*x; f

evaluate to the same.

tail recursive sum

def sum(f: Int => Int, a:Int, b:Int) = {
    @scala.annotation.tailrec
    def doSum(total:Int, aval:Int):Int = {
        if (aval > b) total else doSum(total + f(aval),aval+1)
    }
    doSum(0,a)
}

currying
from docs - 
"Methods may define multiple parameter lists. When a method is called with a fewer number of parameter lists, then this will yield a function taking the missing parameter lists as its arguments.""
a function that returns a function. Like a template in c++, for example

def sum (f: Int => Int) :(Int, Int) => Int = {
    def sumF(a:Int,b:Int): Int = {
    if (a>b) 0 else f(a) + sumF(a+1,b)
    }
    sumF
}

sum now takes a function, and returns a function (return type is (Int,Int) => Int). the returned functino will take two Ints and return one. In this case, an when an initial function (f) is passed into sum, it will return a function that sums the initial function (f) within the supplied bounds.

so, we could do
def sumCubes = sum((x:Int) => x*x*x)
def sumSquares = sum((x:Int) => x*x)

and then call
sumSquares(2,3) // 13
sumCubes(4,7) // 748

Alternatively, we could invoke the returned function directly

val moose = sum((x:Int)=>x*x) (2,3) //13

Again, there is some syntactic sugar for currying

def sum(f:Int => Int) (a:Int,b:Int): Int = {
    if (a>b) 0 else f(a) + sum(f)(a+1,b)
}
is equivalent to the definitino of sum above, but without the definition of the inner function. 

multiple parameter lists
def f(args1)...(argsn) = E
where n > 1 is equivlaent to
def f(args1)...(argsn-1) = {def g(argsn) = E ; g}

or
def f(args1)...(argsn-1) = (argsn => E)

Carrying this through gives

def f = (args1 => (args2 => ...(argsn => E)))

named after Haskell Brooks Curry (same guy Haskell language is named after )



function that calculates product of values of function for points on an interval
write factorial in terms of product

function that generalises sum and product

def product(f: Int=>Int) (a:Int,b:Int) :Int = {
if (a>b) 1 else product(f)(a+1,b)*f(a)  
}

def factorial(n:int) = product((x:Int) =>x)(1,n)


def CumulativeFunctionOperation(operation: (Int,Int) => Int, initVal:Int)(f:Int=>Int)(a:Int,b:Int):Int = {
    if (a>b) initVal else operation(f(a),CumulativeFunctionOperation(operation,initVal)(f)(a+1,b))
}

def sum2:(Int=>Int)=>(Int,Int)=>Int = CumulativeFunctionOperation((x:Int,y:Int)=> x+y,0)

sum2(x=>x*x)(2,3) // 13

def prod2:(Int=>Int)=>(Int,Int)=>Int = CumulativeFunctionOperation((x:Int,y:Int)=> x*y,1)

prod2(x=>x*x)(2,3) // 36


CumulativeFunctionOperation is a form of map reduce
the operation is the reducer
the supplied funcion is the map
the bounds define the sequence that we are map/reducing

Mind Blown

These functions are in the worksheet "curying.sc" under misc_worksheets project


# functional implementation of sets
week 2 assignment was interesting. A set can be implemented as a function that returns true if it contains the supplied argument. Union of two sets is then the or of their charateristic functions, and the intersection the and. 
The map implementation took me a while to figure out. Instead of thinking of map as [f(x) for x in set], we define the mapped characteristic as a check to see whether the initial set contains (any) element that would map to x. It's a bit backwards. 

syntax notation
extended Backus-Naur form (EBNF)













