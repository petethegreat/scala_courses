
1.1 programming paradigms

mutation - change some attribute while maintaining identity. For example, could define a polynomial class, then set a certain coefficient to a particular value.

functional programming - avoid mutation - use immutable variables (values)
take something and change it, resulting in something else.
minimise side effects

functional programming
restricted definition - no mutable variables, assignments, or imperative conttrol structures
wider sense - a functional programming language allows the construction of elegant programs that focus on fucntions

functions are first class functions

misc


call by value
def func(a:Int):Int = {...}
function func takes an int, returns an Int. Integer argument a is evaluated when the function is called

call by name
def fun(a: =>Int): Int
function fun takes an integer argment (a). argument a is evaluated when it needs to be.

Not all functions terminate, infinte loops are a thing


Both call by value and call by name will reduce to the same outcome provided
  - the reduced expression consists of pure functions (no state information/side effects?)
  - both evaluations terminate (no infinte loops)

if call by value terminates, then call by name will also
converse is not guarenteed: call by name termination does not imply call by value termination
in call by name, unused arguments are not evaluated
  - could have a function that takes two arguments. The second argument is not used (always)
  - could pass a non-terminating input to the CBN function, which is not used. no big deal
  - call by value will try to evaluate it and get stuck

def loop = loop

def moose(a: Int, b: Int):Int = a

moose(1,loop)
will terminate under call by name but not call by value

scala uses call by value by default, Unless the function arguments are defined with =>

def moose_cbn(a: =>Int, b: =>Int) = {}

conditionals
Boolean operations don't always need to evaluate the right hand operand (short circuit evaluation)


true && e -> e
false && e -> false
true || e -> true
false || e -> e



Things can be defined by name or by value
so 
def x = loop
is a function, it is not evaluated untill it needs to be (call by name)

val x = loop
evaluates to loop (call by value) immediately. this will kill your scala session/repl

Recursion
Recursive functions must always have their return type explicitly defined

Tail Recursion
If a function calls itself as it's last action, the stack frame can be reused
Essentially it acts the same as a loop

if a functions last action is to call a function, (maybe the same, maybe different functino), then the stack frame can be used - this is a tail-call

Tail recursive factorial (works)

def factorial(N:Int) = {
    @scala.annotation.tailrec
    def currentProd(n:Int, prod:Int) :Int = {
        if (n==0) prod
        else currentProd(n-1,n*prod)
    }
    currentProd(N,1)
}

blocks and scope
a block is defined by curly braces {}

definitiones inside a block are invisible outside the block
definitions from outside the block are visible inside, provided they have not been shadowed


higher order functions
functions are first class values
they can be passed and returned
a function that does this is called a higher order function

this can be used to factor out common procedures. For example, 

sumFunc(a:Int,b:Int,f: Int =>Int): Int = {
    if (a > b) 0 else f(a) + sumFunc(a+1,b,f)
}

defines a function sumFunc, that takes two integers and a function that takes an Int and returns an Int (Int => Int)
For example, we could sum all squares or cubes between 2 and 5 by calling
sumFunc(2,5,square)
sumFunc(2.5.cube)

The notation A => B is  a ** function type. it is a type that defines a mapping from type A to type B (by  afunction)

anonymous functions
strings exist as literals. We can just write "abc", and the compiler knows it to be a string. We don't need to do 
def str = "abc"; println(str)
instead println("abc") works just fine
Same can be done with functions, we don't always need to define a function, we can define anonymous functions as needed.
(same as lambda functions in python)

these are defined like this
(x: Int) => x*x*x
the type of x can be omitted if it can be inferred.

anonymous functions are syntactic sugar
(x:Int) = x*x

def f(x:Int) = x*x; f

evaluate to the same.

tail recursive sum

def sum(f: Int => Int, a:Int, b:Int) = {
    @scala.annotation.tailrec
    def doSum(total:Int, aval:Int):Int = {
        if (aval > b) total else doSum(total + f(aval),aval+1)
    }
    doSum(0,a)
}

currying
from docs - 
"Methods may define multiple parameter lists. When a method is called with a fewer number of parameter lists, then this will yield a function taking the missing parameter lists as its arguments.""
a function that returns a function. Like a template in c++, for example

def sum (f: Int => Int) :(Int, Int) => Int = {
    def sumF(a:Int,b:Int): Int = {
    if (a>b) 0 else f(a) + sumF(a+1,b)
    }
    sumF
}

sum now takes a function, and returns a function (return type is (Int,Int) => Int). the returned functino will take two Ints and return one. In this case, an when an initial function (f) is passed into sum, it will return a function that sums the initial function (f) within the supplied bounds.

so, we could do
def sumCubes = sum((x:Int) => x*x*x)
def sumSquares = sum((x:Int) => x*x)

and then call
sumSquares(2,3) // 13
sumCubes(4,7) // 748

Alternatively, we could invoke the returned function directly

val moose = sum((x:Int)=>x*x) (2,3) //13

Again, there is some syntactic sugar for currying

def sum(f:Int => Int) (a:Int,b:Int): Int = {
    if (a>b) 0 else f(a) + sum(f)(a+1,b)
}
is equivalent to the definitino of sum above, but without the definition of the inner function. 

multiple parameter lists
def f(args1)...(argsn) = E
where n > 1 is equivlaent to
def f(args1)...(argsn-1) = {def g(argsn) = E ; g}

or
def f(args1)...(argsn-1) = (argsn => E)

Carrying this through gives

def f = (args1 => (args2 => ...(argsn => E)))

named after Haskell Brooks Curry (same guy Haskell language is named after )



function that calculates product of values of function for points on an interval
write factorial in terms of product

function that generalises sum and product

def product(f: Int=>Int) (a:Int,b:Int) :Int = {
if (a>b) 1 else product(f)(a+1,b)*f(a)  
}

def factorial(n:int) = product((x:Int) =>x)(1,n)


def CumulativeFunctionOperation(operation: (Int,Int) => Int, initVal:Int)(f:Int=>Int)(a:Int,b:Int):Int = {
    if (a>b) initVal else operation(f(a),CumulativeFunctionOperation(operation,initVal)(f)(a+1,b))
}

def sum2:(Int=>Int)=>(Int,Int)=>Int = CumulativeFunctionOperation((x:Int,y:Int)=> x+y,0)

sum2(x=>x*x)(2,3) // 13

def prod2:(Int=>Int)=>(Int,Int)=>Int = CumulativeFunctionOperation((x:Int,y:Int)=> x*y,1)

prod2(x=>x*x)(2,3) // 36


CumulativeFunctionOperation is a form of map reduce
the operation is the reducer
the supplied funcion is the map
the bounds define the sequence that we are map/reducing

Mind Blown

These functions are in the worksheet "curying.sc" under misc_worksheets project


# functional implementation of sets
week 2 assignment was interesting. A set can be implemented as a function that returns true if it contains the supplied argument. Union of two sets is then the or of their charateristic functions, and the intersection the and. 
The map implementation took me a while to figure out. Instead of thinking of map as [f(x) for x in set], we define the mapped characteristic as a check to see whether the initial set contains (any) element that would map to x. It's a bit backwards. 

syntax notation
extended Backus-Naur form (EBNF)


classes
exapmles of this stuff are in rational worksheet (week2/misc_worksheets/rationals.sc)

class Rational(x:Int, y:Int) {
  
  def method(args:Int) = block
}

methods are public
class definition is the constructor
private methods should be prefaced with private declaration
overriding methods should be prefixed with override

in a class method, the instance of the class can be referenced with this (In lectures, the argument to class methods is often "that", so multiplication could be written new Rational(this.numer*that.numer,this.denom*that.denom))

require is a function that can be used to make sure the class being initialised meets some conditions, for example rational worksheet (week2/misc_worksheets/rationals.sc), we require that a class be initialised with a nonzero denominator. require takes a condition and a string as arguments. If the condition is not met, then an illegalArgumentException is thrown and the string is printed.


also, there is assert. Assert also takes a condition and a string, but throws an AssertionError when the conditino is not met.

The intent is that require enforces a precondition on the caller of a function
assert is used to check the code of the function itself. 

require is to make sure the function is called as intended, assert is to check that things are not borked in the internals.

Alternate constructors
alternate constructors can be created by defining "this" as a function that takes alternate arguments (by signature), and then invoking the primary constructor appropriately (again, using this)
e.g. def this(x:Int) = this(x,1)

then val moose = new Rational(3) will be mapped to Rational(3,1)


defining operators

any method with a parameter can be used like an infix operator
r add s is equivalent to r.add(s)
r less s -> r.less(s), etc

identifiers
operators can be used as identifiers
alphanumeric - starts with letter, follwed by letters/numbers
symbolic - start with operator symbol, followed by other operator symbols
underscore counts as letter
alphanumeric can end in _ followed by operator symbols

so x_, x_+*, x1, *, vector_++, counter_= 
are valid identifiers

unary_- the binary - operator

things like +, -, <, > can just be defined as class methods

operator precedence

https://docs.scala-lang.org/tour/operators.html

a + b ^? c ?^ d less a ==> b | c

can be rewritten (parenthesised) as 

((a + b) ^? (c ?^ d)) less ((a ==> b) | c)

# classes and dynamic binding
dynamic binding is how the function determines which class method should be invoked at runtime

term rewriting?

Class hierarchies - more that one cass goes into the definintion of a derived class

Abstract classes are those in which a definition is missing an implementation

abstract class IntSet {
    def incl(x:Int): IntSet
    def contains(x:Int) Boolean
}
As the definitions are missing, the class cannot be instatntiated. new IntSet will give a compiler error.




persistent data structures
with out binary trees, when we call include, we are not mutating. New nodes are created, but the old ones are still present. We could backtrack to the version of the data prior to the insertion (in principle)

we use the extend keyword to derive a class.
this implies that both empty and nonempty meet all the criteria of intset, but may have additional functionality. Instances of thee classes can be used whenever intsets are reuired

intset is the superclass of both Empty and NonEmpty

if no extend clause is given, then the statndard java class "object" is assumed

the base class of a given class are all direct or indirect superclasses

redefine can be used to reimplement a non abstract definition, but the override clause must be used.


when replacing Empty class with Empty object, the object is singleton.
there is only one instance of the object, new does not need to be used.
singleton objects are values, Empty evaluates to itself


## Classes and packages

to define a pacakge, use the package clause
package progfun.examples
object Hello {}

object would then be located in the progfun.examples package, it's fully qualified name is progfun.examples.Hello

import clause canbe used to refer to objects/classes by nae

import progfun.examples.Hello
Hello

or 

import progfun.week3.{Rational, Hello}

or

import progfun.week3._

following things are imported by default


all member of package scala
all member of package java.lang
all member of the singleton object scala.Predef

For example, Int and Boolean are members of scala (scala.Int, scala.Boolean)
assert and requre are in scala.preDef


scala-lang.org/api/current

In java and scala a class can only have one superclass (not true in python (or c++?))

If there are several natural (potential) superclasses, use traits instead

trait Planar {
  def height: Int
  def width: Int
  def surface = width*height
}

traits are defined the same way as abstract base classes. 
classes can then implement traits

class Square extends Shape with Planar with Movable ...

traits are like interfaces in java, but are more powerful because then can contain fields and concrete methods.
traits cannot have value parameters, only classes can.

Any is the base type of all types
AnyVal inherits from Any. Numeric types (boolean, Int) inherit from AnyVal
Any defines methods '==','!=', toString

Nothing is at the bottom of scala's type hierarchy. it is a subtype of every other type.
Nothing can signal abnormal termination.
Empty lists/containers can have elememt type Nothing

Null is a subtype of all reference types, and the type of the null value
(null is the value, Null is the type)

Polymorphism
many forms
 - a function can be invoked using arguments of many types
 - a type (template/parameterisation) can have instances of many types (i.e. an instance can be one of many types)
subtyping - an instance of a subtype can be treated as if it were the base class (converse is not true)
generics - one template can be generalise to many different subtyped versions



type parameterisation
type parameterisation means that classes and methods can accept types as parameters. This is analagous to templates (e.g. STL) in c++, instead of a single vector class, we initialis objects of type vector<double> or vector<int>, or vector<myClass>.


cons list
a cons list is an imutable linked list. It is constructed from two fundamental building blocks
Nil - empty list
Cons - contains a single element and the rest of the list
So, a list of (3,5,7,6,4) would be represented as (3,(5, (7, (6, (4, ()))))), which would be constructed as 
cons(3,cons(5, cons(7, cons(6, cons(4,Nil)))))

To implement a conslist, define a trait that with head and tail fields. The head should be an element, the type of the tail should be the same as the type of the trait (e.g. TweetList)
Derive classes that extend the base list trait, one for the empty list (Nil) and one for non-empty (Cons)

syntax: class MyClass(val head:Int, val tail:IntList)
the vals in the constructor mean that the class will have fields associated with those parameters of the constructor.
 
class MyClass(val head:Int, val tail:IntList) = { ...}
is euivalent to 
class MyClass( headparm:Int, tailParm: IntList) = {
  val head = headparm
  val tail = tailParm
  ...

}

back to type parameterisation, this is done using square brackets
trait List[T]
class Cons[T](head:T, tail: List[T]) extends List[T]  {}

T is the type parameter. We could instantiate Cons objects for lists of Int or Double using

val IntList = Cons[Int](7,Nil[Int])
val dubList = Cons[Double](7.5,Nil[Double])
For example

Type inference works with type parameterisation
For instance, 
class dummy[T](val head:T) = {...}

val moose = new dummy(7) 
val caribou = new dummy(7.5)
the compiler will infer that dummy[Int] is the best type for moose, and dummy[Double] is best for caribou


Type parameters/arguments are removed at runtime - this is called type erasure
done differently from c++, where type info is still around at runtime

## Objects

a pure object oriented language (like Java) is one in which every value is an object and the type of each value is a class. Every operation is a class method.

In scala, ints and booleans are, at some level, mapped to java/scala primitive types, but these can defined as regular classes. All operations on ints/booleans can be implemented as methods.

Example - booleans class implemented as IfThenElse function
cond.ifThenElse(thenExpression,elseExpression)


peano numbers - this was discussed in GEB

def operator<[T](x:=> T): Boolean = ifThenElse(false,x)

implement natural numbers
abstract class Nat {
  def isZero: Boolean
  def predecessor: Nat
  def successor: Nat
  def + (that: Nat): Nat
  def - (that: Nat): Nat
}

object Zero extends Nat{
  def isZero = true
  def successor =  new succ(this)
  def predecessor = throw scala.invalidArgumentException("zero has no predecessor")
  def + (that: Nat) = that
  def - (that: Nat) = throw scala.invalidArgumentException("cannot subtract from zero") // if that.isZero this else error
}
class succ(n: Nat) extends Nat{
  def isZero = false
  def predecessor = n
  def sucessor = new succ(this)
  def + (that: Nat) = if that.isZero this else (this.successor)+(that.predecessor)
  def - (that: Nat) = if that.isZero this else (this.predecessor)-(that.predecessor)

} 